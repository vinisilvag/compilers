#line 1 "cool-lex.cc"

#line 3 "cool-lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */

/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 59
#define YY_END_OF_BUFFER 60
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[625] =
    {   0,
        0,    0,    2,    2,    7,    7,   10,   10,   60,   58,
       57,   56,    9,   26,   27,   19,   17,   31,   18,   30,
       20,   53,   32,   33,   23,   21,   15,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   28,
       29,   16,    2,    2,    3,    2,    3,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    7,    7,    8,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,   10,   10,   12,   14,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   58,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   13,
       57,    1,    5,    6,   53,   22,   24,   25,   54,   54,
       54,   54,   54,   38,   35,   39,   54,   54,   54,   54,

       54,   49,   54,   54,   54,   55,   55,   55,   55,   55,
       55,   38,   35,   39,   55,   55,   55,   55,   55,   49,
       55,   55,   55,   55,    2,    2,    4,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    7,    7,    1,
        5,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,   10,   10,    5,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   11,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   54,   54,   54,   54,   54,
       54,   42,   54,   48,   50,   54,   54,   54,   55,   55,
       55,   55,   55,   55,   55,   42,   55,   48,   50,   55,
       55,   55,   55,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   46,   54,   37,
       47,   54,   54,   43,   44,   36,   54,   46,   55,   37,
       47,   55,   55,   55,   43,   44,   36,   51,   55,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   34,   54,   54,   45,   34,
       52,   55,   55,   45,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    7,    7,    7,    7,    7,    7,    7,
        7,    7,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   54,   41,   55,   41,    2,    2,    2,    2,    7,

        7,    7,    7,   10,   10,   10,   10,   54,   55,    2,
        2,    7,    7,   10,   10,   40,   40,    2,    2,    7,
        7,   10,   10,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    1,    5,
        6,    7,    8,    9,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
       17,   18,    1,   19,   20,   21,   22,   23,   24,   25,
       21,   26,   27,   21,   21,   28,   21,   29,   30,   31,
       21,   32,   33,   34,   35,   36,   37,   21,   21,   21,
        1,   38,    1,    1,   39,    1,   40,   41,   42,   43,

       44,   45,   41,   46,   47,   41,   41,   48,   41,   49,
       50,   51,   41,   52,   53,   54,   55,   56,   57,   41,
       41,   41,   58,    1,   59,   60,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[62] =
    {   0,
        1,    1,    2,    3,    4,    1,    4,    1,    1,    1,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    3,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    1,    1,    1,
        3
    } ;

static const flex_int16_t yy_base[637] =
    {   0,
        0,    0,   61,    0,  122,    0,  183,    0,  633, 3072,
      629, 3072, 3072,  623, 3072,  623, 3072, 3072,  617, 3072,
     3072,  613, 3072, 3072,  235,  571, 3072,    0,  226,  220,
      220,  226,  226,  233,  224,  228,  234,  235,    0,  244,
      254,  266,  265,  261,  265,  263,  266,  271,  273, 3072,
     3072, 3072,    0,  561,  550,    0,  522,    0,    0,    0,
        0,    0,  489,    0,    0,  310,  478,    0,  327,  388,
      320,  327,  430,  389,  390,  331,  395,  434,  441,  489,
      550,  329,  404,  592,  489,  490,  496,  436,  551,  554,
        0,    0,    0,    0,  492, 3072,  464,    0,  435,    0,

        0,    0,    0,    0,  414,    0,    0,  315,  394,    0,
      645,  706,  330,  495,  748,  594,  645,  556,  565,  646,
      650,  801,  862,  699,  708,  904,  713,  750,  801,  651,
      802,  805,    0,    0,    0,    0,  409, 3072, 3072,    0,
        0,  389,    0,    0,    0,    0,    0,  380,    0,    0,
      374,  362,    0,  957, 1017,  751,  864, 1058,  865,  906,
      807,  710,  868,  899,    0, 1111, 1171,  950,  957, 1212,
     1018, 1019,  961, 1024, 1053, 1062,    0,    0,    0, 3072,
      364, 3072, 3072, 3072,  351, 3072, 3072, 3072,    0,  268,
      284,  319,  341,    0,    0,  375,  386,  419,  427,  428,

      434,    0,  442,  487,  485,    0,  492,  506,  520,  535,
      544,    0,    0,  560,  551,  582,  589,  586,  594,    0,
      637,  644,  642,  653,    0,  332, 3072,  317,    0,    0,
        0,  959,  960, 1104, 1113, 1111, 1114, 1115, 1172, 1177,
     1174, 1117, 1187, 1214, 1120, 1219, 1246, 1236, 1251, 1252,
     1253, 1269, 1267, 1268, 1278, 1283, 1284, 1293, 1300, 1307,
     1316, 1318, 1322, 1331, 1354, 1340, 1349,    0,  324,    0,
        0,  309,    0,    0,    0, 1363, 1372, 1373, 1386, 1387,
     1388, 1389, 1404, 1413, 1420, 1427, 1436, 1431, 1418, 1442,
     1463, 1461, 1458, 1477, 1474, 1493, 1476, 1492, 1495, 1499,

     1508, 1509, 1524, 1531, 1540, 1535, 1522, 1546, 1567, 1564,
     1573,    0,  310,    0,  287,    0,    0,    0, 1562, 1589,
     1578, 1603, 1604, 1605, 1607, 1620, 1621, 1630, 1643, 1639,
     1652, 1634, 1669, 1670, 1675, 3072, 1684, 1688, 1685, 1706,
     1707, 1709, 1710, 1720, 1725, 1736, 1741, 1750, 1746, 1757,
     1759, 1776, 1789, 1790, 1792,  658,  676,  707,  720,  725,
      742,    0,  744,    0,    0,  795,  795,  808,  813,  805,
      859,  864,  854,  873,  868,    0,  897,    0,    0,  903,
      906,  916,  913, 1803, 1808, 1822, 1832, 1829, 1835, 1839,
     1858, 1848, 1862, 1864, 1871, 1873, 1894, 1875, 1905, 1904,

     1907, 1930, 1911, 1928, 1944, 1937, 1943, 1953, 1959, 1962,
     1969, 1976, 1985, 1991, 2001, 2002, 2017, 2008, 2024, 2031,
     2033, 2034, 2040, 2038, 2063, 2057, 2072, 2073, 2086, 2103,
     2102, 2089, 2105, 2118, 2120, 2121, 2134, 2147, 2137, 2152,
     2153, 2170, 2177, 2183, 2192, 2188, 2193, 2206, 2209, 2210,
     2219, 2215, 2232, 2233, 2250, 2249, 2255, 2272, 2279, 2265,
     2286, 2282, 2295, 2304, 2311, 2318, 2305,    0,  949,    0,
        0,  959,  965,    0,    0,    0,  970,    0,  977,    0,
        0,  996,  989, 1023,    0,    0,    0,    0, 1027, 2308,
     2321, 2327, 2337, 2344, 2343, 2353, 2358, 2359, 2380, 2369,

     2382, 2383, 2385, 2412, 2406, 2417, 2399, 2401, 2422, 2423,
     2448, 2433, 2446, 2447, 2449, 2470, 2473, 2463, 2484, 2486,
     2495, 2488, 2497, 2513, 2518, 2520, 2527, 2529, 2534, 2543,
     2545, 2550, 2560, 2561, 2566, 2567, 2577, 2590, 2593, 2583,
     2596, 2606, 2615, 2609, 2625, 2628, 2632, 2642, 2647, 2657,
     2641, 2663, 2668, 2672, 2674,    0, 1033, 1061,    0,    0,
        0, 1062, 1071,    0, 2673, 2697, 2687, 2703, 2706, 2708,
     2712, 2727, 2713, 2729, 2738, 2748, 2744, 2753, 2754, 2770,
     2780, 2759, 2784, 2786, 2799, 2801, 2810, 2815, 2817, 2828,
     2826, 1061,    0, 1102,    0, 2833, 2832, 2849, 2842, 2858,

     2865, 2868, 2871, 2881, 2890, 2897, 2900, 1105, 1131, 2906,
     2916, 2922, 2932, 2933, 2943,    0,    0, 2954, 2959, 2964,
     2969, 2970, 2973, 3072,  260,  257, 3021, 3026, 3031, 3036,
     3041, 3046, 3051, 3056, 3061, 3066
    } ;

static const flex_int16_t yy_def[637] =
    {   0,
      624,    1,  624,    3,  624,    5,  624,    7,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  624,
      624,  624,  627,  627,  624,  627,  624,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  628,  628,
       70,   70,   70,   70,   70,   70,   70,   70,   70,  629,
      629,   81,   81,   81,   81,   81,   81,   81,   81,   81,
      627,  627,  627,  630,  630,  624,  630,  630,  630,  630,

      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      631,  631,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  632,  632,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  630,  630,  630,  633,  633,  624,  624,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  634,  634,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  635,  636,  636,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  633,  633,  633,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,

      625,  625,  625,  625,  625,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  627,  627,  624,  627,  627,  627,
      627,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,  630,  630,  630,
      630,  630,  630,  630,  630,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  123,  123,  123,  123,  123,  123,  123,  123,

      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  633,  633,  633,  633,  633,  633,  633,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  624,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   81,   81,   81,   81,

       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   81,

       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  625,  625,  625,  625,  626,
      626,  626,  626,  626,   70,   70,   70,   70,   81,   81,
       81,   81,   81,  112,  112,  112,  112,  123,  123,  123,
      123,  123,  155,  155,  155,  155,  167,  167,  167,  167,
      167,  625,  625,  626,  626,   70,   70,   81,   81,  112,

      112,  123,  123,  155,  155,  167,  167,  625,  626,   70,
       81,  112,  123,  155,  167,  625,  626,   70,   81,  112,
      123,  155,  167,    0,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624
    } ;

static const flex_int16_t yy_nxt[3134] =
    {   0,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   10,   27,   28,
       28,   29,   28,   30,   31,   28,   32,   33,   34,   35,
       36,   28,   28,   37,   28,   28,   38,   10,   10,   39,
       39,   40,   39,   41,   42,   39,   43,   44,   45,   46,
       47,   39,   39,   48,   39,   39,   49,   50,   51,   52,
       10,   53,   54,   12,   53,   55,   56,   57,   58,   59,
       60,   61,   62,   63,   64,   65,   66,   67,   53,   68,
       69,   69,   70,   69,   71,   72,   69,   73,   74,   75,
       76,   77,   69,   69,   78,   69,   69,   79,   53,   53,

       80,   80,   81,   80,   82,   83,   80,   84,   85,   86,
       87,   88,   80,   80,   89,   80,   80,   90,   91,   92,
       93,   53,   94,   95,   96,   94,   97,   98,   99,  100,
      101,  102,  103,  104,  105,  106,  107,  108,  109,   94,
      110,  111,  111,  112,  111,  113,  114,  111,  115,  116,
      117,  118,  119,  111,  111,  120,  111,  111,  121,   94,
       94,  122,  122,  123,  122,  124,  125,  122,  126,  127,
      128,  129,  130,  122,  122,  131,  122,  122,  132,  133,
      134,  135,   94,  136,  137,  138,  139,  140,  141,  142,
      143,  144,  145,  146,  147,  148,  149,  150,  151,  152,

      136,  153,  154,  154,  155,  154,  156,  157,  154,  158,
      159,  160,  161,  162,  154,  154,  163,  154,  154,  164,
      165,  136,  166,  166,  167,  166,  168,  169,  166,  170,
      171,  172,  173,  174,  166,  166,  175,  166,  166,  176,
      177,  178,  179,  180,  186,  190,  194,  192,  202,  198,
      195,  187,  193,  191,  196,  199,  200,  203,  197,  204,
      205,  206,  201,  207,  189,  190,  194,  192,  202,  198,
      195,  208,  193,  191,  196,  199,  200,  203,  197,  204,
      205,  209,  201,  207,  216,  211,  210,  220,  218,  213,
      217,  208,  212,  214,  219,  221,  222,  215,  224,  315,

      356,  209,  223,  357,  216,  211,  210,  220,  218,  213,
      217,  313,  212,  214,  219,  221,  222,  215,  224,  229,
      356,  272,  223,  357,  273,  269,  230,  225,  225,  228,
      225,  274,  225,  226,  225,  225,  225,  225,  225,  232,
      225,  225,  225,  225,  225,  225,  232,  235,  249,  276,
      232,  358,  236,  237,  232,  245,  252,  279,  232,  232,
      359,  253,  280,  185,  225,  181,  232,  235,  249,  276,
      232,  358,  236,  237,  232,  245,  252,  279,  232,  318,
      359,  253,  280,  316,  225,  225,  225,  225,  225,  225,
      317,  225,  315,  225,  314,  225,  225,  225,  225,  225,

      360,  225,  225,  225,  225,  225,  225,  233,  232,  232,
      313,  275,  241,  243,  232,  234,  232,  232,  242,  244,
      360,  361,  232,  254,  246,  225,  272,  233,  232,  232,
      255,  249,  241,  243,  232,  234,  232,  232,  242,  244,
      271,  361,  232,  254,  246,  225,  225,  225,  225,  232,
      255,  249,  362,  232,  238,  249,  363,  232,  239,  247,
      232,  232,  240,  249,  364,  264,  248,  365,  232,  232,
      270,  366,  362,  232,  238,  249,  363,  232,  239,  247,
      232,  232,  240,  249,  364,  264,  248,  365,  232,  225,
      225,  366,  225,  269,  225,  231,  225,  225,  225,  225,

      225,  228,  225,  225,  225,  225,  225,  225,  249,  249,
      367,  368,  259,  261,  276,  249,  249,  249,  260,  262,
      263,  281,  276,  249,  369,  370,  225,  227,  249,  249,
      367,  368,  259,  261,  276,  249,  249,  249,  260,  262,
      263,  281,  276,  249,  369,  370,  225,  225,  225,  225,
      225,  225,  371,  225,  372,  225,  182,  225,  225,  225,
      225,  225,  226,  225,  225,  225,  225,  225,  225,  250,
      249,  373,  371,  249,  372,  276,  265,  251,  249,  267,
      289,  249,  266,  276,  276,  374,  375,  225,  188,  250,
      249,  373,  276,  249,  290,  276,  265,  251,  249,  267,

      289,  249,  266,  276,  276,  374,  375,  225,  225,  225,
      225,  249,  276,  276,  290,  376,  256,  285,  377,  249,
      257,  276,  378,  286,  258,  185,  184,  379,  183,  182,
      181,  249,  624,  276,  624,  376,  256,  285,  377,  249,
      257,  276,  378,  286,  258,  268,  268,  379,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  624,  268,  268,
      268,  268,  268,  268,  276,  276,  380,  381,  287,  276,
      293,  291,  276,  276,  288,  292,  382,  276,  293,  383,
      308,  468,  268,  624,  276,  276,  380,  381,  287,  276,
      293,  291,  276,  276,  288,  292,  382,  276,  293,  383,

      308,  468,  268,  268,  268,  268,  268,  268,  469,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  293,  268,
      268,  268,  268,  268,  268,  277,  296,  298,  469,  319,
      470,  297,  293,  278,  299,  293,  303,  319,  293,  333,
      293,  471,  304,  268,  624,  277,  296,  298,  472,  319,
      470,  297,  293,  278,  299,  293,  303,  319,  624,  333,
      293,  471,  304,  268,  268,  268,  268,  276,  472,  293,
      319,  473,  282,  305,  474,  276,  283,  293,  322,  306,
      284,  624,  624,  323,  624,  624,  624,  276,  624,  293,
      319,  473,  282,  305,  474,  276,  283,  293,  322,  306,

      284,  268,  268,  323,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  624,  268,  268,  268,  268,  268,  268,
      293,  293,  475,  476,  293,  307,  319,  309,  293,  293,
      311,  332,  293,  310,  319,  477,  478,  479,  268,  624,
      293,  293,  475,  476,  293,  307,  319,  309,  293,  293,
      311,  332,  293,  310,  319,  477,  478,  479,  268,  268,
      268,  268,  268,  268,  624,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  624,  268,  268,  268,  268,  268,
      268,  294,  480,  319,  319,  481,  482,  319,  328,  295,
      324,  319,  319,  334,  329,  319,  483,  484,  624,  268,

      624,  294,  480,  319,  319,  481,  482,  319,  328,  295,
      324,  319,  319,  334,  329,  319,  483,  484,  319,  268,
      268,  268,  268,  293,  335,  319,  319,  485,  300,  330,
      486,  293,  301,  319,  487,  331,  302,  624,  319,  488,
      489,  624,  624,  293,  335,  319,  319,  485,  300,  330,
      486,  293,  301,  319,  487,  331,  302,  312,  312,  488,
      489,  312,  312,  312,  312,  312,  312,  312,  312,  337,
      312,  312,  312,  312,  312,  312,  342,  340,  232,  232,
      337,  556,  341,  343,  337,  351,  232,  232,  337,  337,
      557,  558,  384,  559,  624,  624,  342,  340,  232,  232,

      337,  556,  341,  343,  337,  351,  232,  232,  337,  560,
      557,  558,  384,  559,  312,  312,  312,  312,  312,  561,
      562,  312,  312,  312,  312,  312,  312,  312,  312,  560,
      312,  312,  312,  312,  312,  312,  320,  337,  337,  561,
      562,  347,  349,  337,  321,  337,  337,  348,  350,  563,
      564,  337,  624,  352,  624,  624,  320,  337,  337,  592,
      624,  347,  349,  337,  321,  337,  337,  348,  350,  563,
      564,  337,  337,  352,  312,  312,  312,  319,  353,  592,
      337,  337,  325,  593,  354,  319,  326,  355,  594,  337,
      327,  624,  337,  595,  608,  624,  624,  319,  353,  624,

      337,  337,  325,  593,  354,  319,  326,  355,  594,  337,
      327,  312,  312,  595,  608,  312,  312,  312,  312,  312,
      312,  312,  312,  385,  312,  312,  312,  312,  312,  312,
      387,  232,  232,  232,  232,  609,  232,  616,  232,  232,
      232,  232,  232,  385,  232,  386,  391,  232,  624,  624,
      387,  232,  232,  232,  232,  609,  232,  616,  232,  232,
      232,  232,  232,  617,  232,  386,  391,  232,  312,  312,
      312,  312,  312,  624,  624,  312,  312,  312,  312,  312,
      312,  312,  312,  617,  312,  312,  312,  312,  312,  312,
      338,  232,  624,  232,  624,  624,  232,  388,  339,  232,

      624,  232,  624,  624,  232,  624,  232,  390,  624,  624,
      338,  232,  389,  232,  232,  624,  232,  388,  339,  232,
      624,  232,  624,  392,  232,  624,  232,  390,  312,  312,
      312,  337,  389,  232,  232,  624,  344,  624,  232,  337,
      345,  232,  624,  392,  346,  624,  232,  393,  394,  624,
      624,  337,  624,  232,  624,  232,  344,  624,  232,  337,
      345,  232,  396,  232,  346,  232,  232,  393,  394,  395,
      249,  249,  398,  232,  624,  232,  624,  624,  249,  249,
      249,  624,  396,  232,  397,  232,  400,  249,  249,  395,
      249,  249,  398,  232,  249,  401,  249,  249,  249,  249,

      249,  399,  249,  249,  397,  249,  400,  249,  249,  402,
      249,  249,  249,  624,  249,  401,  249,  249,  624,  249,
      249,  399,  249,  249,  624,  249,  249,  249,  403,  402,
      249,  249,  249,  404,  249,  249,  405,  249,  624,  249,
      249,  249,  624,  249,  624,  249,  249,  249,  403,  249,
      249,  407,  406,  404,  249,  249,  405,  249,  249,  249,
      408,  249,  624,  249,  624,  249,  624,  249,  249,  249,
      249,  407,  406,  249,  410,  411,  249,  409,  249,  249,
      408,  249,  276,  624,  624,  624,  624,  249,  249,  624,
      276,  276,  413,  249,  410,  411,  249,  409,  624,  276,

      276,  249,  276,  624,  412,  276,  415,  276,  276,  624,
      276,  276,  413,  276,  276,  276,  276,  624,  414,  276,
      276,  624,  624,  276,  412,  276,  415,  276,  276,  416,
      624,  276,  276,  276,  276,  276,  276,  276,  414,  276,
      276,  624,  624,  276,  624,  276,  276,  276,  417,  416,
      276,  276,  276,  418,  276,  276,  419,  276,  276,  276,
      276,  276,  624,  276,  421,  276,  276,  276,  417,  276,
      276,  422,  420,  418,  276,  276,  419,  293,  276,  624,
      276,  276,  276,  276,  421,  293,  423,  424,  276,  276,
      276,  422,  420,  426,  624,  428,  293,  293,  624,  624,

      276,  293,  276,  293,  293,  293,  423,  424,  276,  425,
      276,  293,  293,  426,  293,  428,  293,  624,  293,  429,
      293,  293,  293,  293,  293,  427,  293,  293,  293,  425,
      624,  293,  293,  430,  293,  293,  293,  624,  293,  429,
      293,  293,  293,  293,  431,  427,  293,  293,  293,  293,
      293,  293,  624,  430,  293,  293,  293,  432,  293,  293,
      433,  293,  293,  293,  431,  293,  624,  293,  435,  293,
      293,  293,  624,  293,  293,  436,  434,  432,  293,  293,
      433,  319,  293,  293,  624,  293,  293,  293,  435,  319,
      437,  293,  293,  293,  293,  436,  434,  441,  438,  439,

      293,  319,  624,  293,  624,  319,  293,  624,  319,  319,
      437,  293,  293,  624,  293,  624,  319,  441,  438,  439,
      293,  440,  319,  443,  319,  319,  319,  624,  319,  624,
      319,  319,  319,  624,  319,  442,  319,  624,  624,  319,
      319,  440,  319,  443,  319,  444,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  442,  445,  319,  319,  319,
      319,  319,  319,  446,  624,  444,  319,  319,  319,  319,
      319,  319,  447,  319,  624,  448,  445,  319,  319,  319,
      624,  319,  319,  446,  624,  449,  319,  624,  319,  319,
      319,  319,  447,  451,  319,  448,  319,  319,  450,  319,

      624,  452,  319,  337,  454,  449,  624,  337,  319,  319,
      624,  337,  337,  451,  319,  337,  319,  319,  450,  624,
      453,  452,  319,  337,  454,  337,  456,  337,  337,  337,
      624,  337,  337,  337,  337,  337,  457,  337,  455,  337,
      453,  624,  624,  624,  337,  337,  456,  337,  337,  337,
      458,  624,  337,  337,  337,  337,  457,  337,  455,  337,
      337,  624,  624,  337,  337,  337,  624,  337,  337,  337,
      458,  459,  337,  337,  460,  337,  337,  337,  337,  461,
      337,  624,  462,  337,  337,  337,  337,  624,  337,  337,
      463,  459,  624,  337,  460,  337,  337,  337,  337,  461,

      624,  624,  462,  337,  337,  464,  337,  624,  337,  337,
      463,  337,  465,  624,  624,  337,  337,  337,  467,  337,
      624,  624,  232,  337,  466,  464,  490,  232,  337,  337,
      232,  337,  465,  624,  624,  232,  337,  337,  467,  337,
      491,  232,  232,  624,  466,  492,  490,  232,  232,  232,
      232,  232,  494,  493,  232,  232,  232,  624,  232,  232,
      491,  232,  232,  624,  495,  492,  232,  232,  232,  232,
      624,  232,  494,  493,  232,  232,  232,  232,  232,  232,
      624,  232,  232,  232,  495,  232,  232,  232,  496,  232,
      232,  497,  232,  624,  249,  232,  624,  232,  232,  498,

      499,  232,  249,  232,  624,  232,  624,  501,  496,  232,
      232,  497,  232,  249,  249,  624,  624,  500,  232,  498,
      499,  249,  249,  249,  249,  503,  249,  501,  502,  624,
      249,  249,  249,  249,  249,  624,  624,  500,  249,  504,
      506,  249,  624,  249,  249,  503,  249,  249,  502,  249,
      249,  249,  249,  505,  249,  249,  249,  249,  249,  504,
      506,  624,  249,  249,  249,  624,  624,  249,  624,  249,
      249,  249,  249,  505,  507,  249,  249,  249,  249,  624,
      508,  249,  249,  249,  249,  510,  249,  509,  249,  249,
      249,  249,  249,  624,  507,  276,  511,  624,  249,  512,

      508,  249,  624,  276,  276,  510,  249,  509,  249,  249,
      276,  624,  276,  624,  514,  276,  511,  513,  276,  512,
      276,  276,  515,  276,  276,  516,  624,  276,  276,  276,
      276,  624,  276,  624,  514,  276,  276,  513,  276,  624,
      276,  276,  515,  276,  276,  516,  517,  276,  276,  276,
      276,  276,  276,  276,  518,  276,  276,  276,  276,  276,
      276,  519,  624,  276,  276,  521,  517,  276,  520,  624,
      276,  276,  276,  276,  518,  624,  293,  276,  276,  276,
      276,  519,  293,  624,  293,  521,  522,  276,  520,  523,
      293,  293,  293,  624,  525,  524,  293,  624,  624,  293,

      293,  624,  293,  624,  293,  293,  522,  624,  293,  523,
      293,  293,  293,  293,  525,  524,  293,  624,  526,  293,
      293,  293,  293,  624,  293,  293,  527,  624,  293,  293,
      293,  528,  293,  293,  624,  529,  293,  293,  526,  293,
      293,  293,  293,  624,  293,  293,  527,  293,  530,  293,
      293,  528,  293,  293,  624,  529,  293,  293,  624,  293,
      293,  293,  531,  624,  533,  293,  293,  293,  530,  624,
      532,  319,  319,  293,  293,  534,  293,  624,  624,  319,
      319,  293,  531,  624,  533,  535,  293,  624,  624,  319,
      532,  319,  319,  536,  293,  534,  319,  319,  537,  319,

      319,  624,  319,  624,  319,  535,  538,  319,  624,  319,
      319,  319,  319,  536,  624,  319,  319,  319,  537,  319,
      319,  539,  319,  540,  319,  319,  538,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  541,  319,  319,
      319,  539,  543,  540,  624,  319,  319,  542,  319,  319,
      624,  337,  337,  319,  319,  544,  319,  541,  319,  337,
      337,  624,  543,  624,  624,  545,  319,  542,  337,  337,
      547,  337,  337,  546,  337,  544,  337,  337,  624,  337,
      337,  624,  337,  624,  337,  545,  624,  548,  337,  337,
      547,  337,  337,  546,  337,  549,  337,  337,  337,  337,

      624,  337,  337,  624,  337,  337,  337,  548,  550,  337,
      624,  337,  337,  337,  337,  549,  551,  624,  337,  337,
      624,  337,  337,  337,  337,  337,  337,  232,  550,  337,
      337,  552,  555,  337,  337,  232,  551,  337,  337,  553,
      232,  554,  337,  337,  337,  337,  232,  232,  232,  624,
      337,  552,  555,  565,  232,  232,  232,  337,  337,  553,
      232,  554,  232,  232,  232,  337,  232,  624,  232,  567,
      232,  232,  232,  565,  232,  566,  232,  232,  232,  624,
      232,  624,  232,  232,  232,  232,  232,  624,  249,  567,
      232,  232,  232,  624,  624,  566,  249,  232,  232,  232,

      232,  249,  249,  568,  249,  232,  232,  232,  249,  249,
      249,  624,  249,  624,  569,  624,  249,  624,  249,  232,
      249,  249,  249,  568,  249,  249,  249,  232,  249,  249,
      249,  249,  249,  249,  569,  570,  249,  571,  249,  249,
      249,  249,  249,  572,  249,  249,  249,  624,  249,  249,
      249,  249,  276,  249,  624,  570,  249,  571,  624,  249,
      276,  249,  249,  572,  249,  276,  276,  249,  276,  249,
      249,  573,  276,  276,  276,  249,  276,  624,  574,  624,
      276,  624,  276,  624,  624,  276,  276,  249,  276,  276,
      276,  573,  276,  276,  276,  249,  276,  276,  574,  576,

      276,  575,  276,  276,  624,  276,  624,  293,  624,  276,
      276,  276,  276,  276,  276,  293,  293,  276,  577,  576,
      276,  575,  276,  276,  293,  276,  624,  293,  624,  578,
      624,  276,  293,  276,  276,  293,  293,  293,  577,  293,
      293,  624,  276,  579,  293,  293,  293,  293,  293,  578,
      624,  624,  293,  293,  293,  581,  293,  293,  580,  293,
      293,  293,  293,  579,  293,  293,  293,  293,  293,  293,
      293,  624,  293,  293,  293,  581,  293,  293,  580,  293,
      319,  293,  293,  582,  293,  319,  319,  293,  319,  293,
      293,  624,  293,  319,  319,  624,  319,  293,  583,  293,

      319,  624,  319,  582,  319,  319,  319,  293,  319,  319,
      319,  624,  319,  319,  319,  319,  319,  319,  583,  585,
      319,  584,  319,  319,  319,  319,  624,  624,  337,  319,
      319,  624,  319,  319,  319,  319,  337,  319,  586,  585,
      319,  584,  319,  319,  337,  319,  624,  337,  337,  624,
      624,  337,  337,  319,  319,  337,  337,  587,  586,  337,
      337,  337,  319,  624,  337,  588,  337,  337,  337,  337,
      624,  337,  337,  624,  337,  337,  337,  587,  589,  337,
      337,  337,  337,  590,  337,  588,  337,  337,  337,  337,
      337,  337,  232,  337,  337,  337,  337,  591,  589,  337,

      232,  337,  337,  590,  337,  624,  232,  337,  624,  597,
      337,  337,  232,  337,  232,  337,  232,  591,  624,  337,
      232,  337,  232,  596,  232,  249,  232,  249,  624,  597,
      232,  249,  249,  249,  232,  249,  232,  624,  598,  249,
      249,  624,  232,  596,  232,  249,  249,  249,  276,  599,
      232,  249,  249,  249,  249,  249,  276,  276,  598,  249,
      249,  624,  624,  276,  600,  276,  249,  276,  276,  599,
      601,  276,  293,  293,  249,  276,  276,  276,  293,  624,
      293,  293,  624,  276,  600,  276,  293,  276,  624,  293,
      601,  276,  293,  293,  624,  276,  602,  293,  293,  293,

      293,  293,  603,  319,  624,  319,  293,  293,  624,  293,
      624,  319,  604,  319,  624,  624,  602,  293,  319,  293,
      319,  605,  603,  319,  624,  319,  319,  293,  319,  337,
      624,  319,  604,  319,  337,  624,  337,  337,  319,  624,
      319,  605,  337,  606,  337,  337,  319,  337,  319,  337,
      607,  232,  232,  337,  337,  337,  337,  337,  624,  232,
      232,  249,  337,  606,  337,  337,  610,  337,  249,  249,
      607,  232,  232,  337,  624,  337,  249,  276,  624,  232,
      232,  249,  611,  624,  276,  276,  610,  293,  249,  249,
      293,  612,  276,  624,  624,  293,  249,  276,  293,  624,

      319,  613,  611,  624,  276,  276,  624,  293,  319,  319,
      293,  612,  276,  624,  614,  293,  337,  319,  293,  337,
      319,  613,  624,  624,  337,  232,  624,  337,  319,  319,
      615,  624,  624,  232,  614,  249,  337,  319,  618,  337,
      624,  276,  624,  249,  337,  232,  624,  337,  619,  276,
      615,  293,  319,  232,  620,  249,  624,  624,  618,  293,
      319,  276,  337,  249,  621,  622,  624,  624,  619,  276,
      337,  293,  319,  232,  620,  623,  624,  624,  249,  293,
      319,  232,  337,  276,  621,  622,  249,  624,  293,  319,
      337,  276,  337,  232,  624,  623,  293,  319,  249,  624,

      337,  232,  624,  276,  624,  624,  249,  624,  293,  319,
      624,  276,  337,  624,  624,  624,  293,  319,  624,  624,
      337,  225,  624,  225,  624,  225,  232,  624,  232,  624,
      232,  249,  624,  249,  624,  249,  268,  624,  268,  268,
      268,  276,  624,  276,  276,  276,  293,  624,  293,  293,
      293,  312,  624,  624,  312,  312,  319,  624,  624,  319,
      319,  336,  336,  336,  336,  336,  337,  624,  624,  337,
      337,    9,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,

      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624
    } ;

static const flex_int16_t yy_chk[3134] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,   25,   29,   31,   30,   35,   33,
       32,   25,   30,   29,   32,   33,   34,   36,   32,   37,
       38,  626,   34,   40,  625,   29,   31,   30,   35,   33,
       32,   40,   30,   29,   32,   33,   34,   36,   32,   37,
       38,   41,   34,   40,   44,   42,   41,   46,   45,   43,
       44,   40,   42,   43,   45,   47,   48,   43,   49,  315,

      190,   41,   48,  191,   44,   42,   41,   46,   45,   43,
       44,  313,   42,   43,   45,   47,   48,   43,   49,   66,
      190,  272,   48,  191,  108,  269,   66,   69,   69,  228,
       69,  108,   69,  226,   69,   69,   69,   69,   69,   71,
       69,   69,   69,   69,   69,   69,   72,   71,   82,  113,
       76,  192,   71,   72,   72,   76,   82,  113,   76,   71,
      193,   82,  113,  185,   69,  181,   72,   71,   82,  113,
       76,  192,   71,   72,   72,   76,   82,  113,   76,  152,
      193,   82,  113,  151,   69,   69,   69,   69,   70,   70,
      151,   70,  148,   70,  142,   70,   70,   70,   70,   70,

      196,   70,   70,   70,   70,   70,   70,   70,   74,   75,
      137,  109,   74,   75,   77,   70,   74,   75,   74,   75,
      196,  197,   77,   83,   77,   70,  105,   70,   74,   75,
       83,   83,   74,   75,   77,   70,   74,   75,   74,   75,
       99,  197,   77,   83,   77,   70,   70,   70,   70,   73,
       83,   83,  198,   78,   73,   88,  199,   73,   73,   78,
       79,   78,   73,   88,  200,   88,   79,  201,   79,   73,
       97,  203,  198,   78,   73,   88,  199,   73,   73,   78,
       79,   78,   73,   88,  200,   88,   79,  201,   79,   80,
       80,  203,   80,   95,   80,   67,   80,   80,   80,   80,

       80,   63,   80,   80,   80,   80,   80,   80,   85,   86,
      204,  205,   85,   86,  114,   87,   85,   86,   85,   86,
       87,  114,  114,   87,  207,  208,   80,   57,   85,   86,
      204,  205,   85,   86,  114,   87,   85,   86,   85,   86,
       87,  114,  114,   87,  207,  208,   80,   80,   80,   80,
       81,   81,  209,   81,  210,   81,   55,   81,   81,   81,
       81,   81,   54,   81,   81,   81,   81,   81,   81,   81,
       89,  211,  209,   90,  210,  118,   89,   81,   89,   90,
      118,   90,   89,  118,  119,  214,  215,   81,   26,   81,
       89,  211,  119,   90,  119,  118,   89,   81,   89,   90,

      118,   90,   89,  118,  119,  214,  215,   81,   81,   81,
       81,   84,  119,  116,  119,  216,   84,  116,  217,   84,
       84,  116,  218,  116,   84,   22,   19,  219,   16,   14,
       11,   84,    9,  116,    0,  216,   84,  116,  217,   84,
       84,  116,  218,  116,   84,  111,  111,  219,  111,  111,
      111,  111,  111,  111,  111,  111,  111,    0,  111,  111,
      111,  111,  111,  111,  117,  120,  221,  222,  117,  121,
      130,  120,  117,  120,  117,  121,  223,  121,  130,  224,
      130,  356,  111,    0,  117,  120,  221,  222,  117,  121,
      130,  120,  117,  120,  117,  121,  223,  121,  130,  224,

      130,  356,  111,  111,  111,  111,  112,  112,  357,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  124,  112,
      112,  112,  112,  112,  112,  112,  124,  125,  357,  162,
      358,  124,  127,  112,  125,  125,  127,  162,  124,  162,
      127,  359,  127,  112,    0,  112,  124,  125,  360,  162,
      358,  124,  127,  112,  125,  125,  127,  162,    0,  162,
      127,  359,  127,  112,  112,  112,  112,  115,  360,  128,
      156,  361,  115,  128,  363,  115,  115,  128,  156,  128,
      115,    0,    0,  156,    0,    0,    0,  115,    0,  128,
      156,  361,  115,  128,  363,  115,  115,  128,  156,  128,

      115,  122,  122,  156,  122,  122,  122,  122,  122,  122,
      122,  122,  122,    0,  122,  122,  122,  122,  122,  122,
      129,  131,  366,  367,  132,  129,  161,  131,  129,  131,
      132,  161,  132,  131,  161,  368,  369,  370,  122,    0,
      129,  131,  366,  367,  132,  129,  161,  131,  129,  131,
      132,  161,  132,  131,  161,  368,  369,  370,  122,  122,
      122,  122,  123,  123,    0,  123,  123,  123,  123,  123,
      123,  123,  123,  123,    0,  123,  123,  123,  123,  123,
      123,  123,  371,  157,  159,  372,  373,  163,  159,  123,
      157,  157,  159,  163,  159,  163,  374,  375,    0,  123,

        0,  123,  371,  157,  159,  372,  373,  163,  159,  123,
      157,  157,  159,  163,  159,  163,  374,  375,  164,  123,
      123,  123,  123,  126,  164,  160,  164,  377,  126,  160,
      380,  126,  126,  160,  381,  160,  126,    0,  164,  382,
      383,    0,    0,  126,  164,  160,  164,  377,  126,  160,
      380,  126,  126,  160,  381,  160,  126,  154,  154,  382,
      383,  154,  154,  154,  154,  154,  154,  154,  154,  168,
      154,  154,  154,  154,  154,  154,  169,  168,  232,  233,
      173,  469,  168,  169,  169,  173,  232,  233,  173,  168,
      472,  473,  233,  477,    0,    0,  169,  168,  232,  233,

      173,  469,  168,  169,  169,  173,  232,  233,  173,  479,
      472,  473,  233,  477,  154,  154,  154,  155,  155,  482,
      483,  155,  155,  155,  155,  155,  155,  155,  155,  479,
      155,  155,  155,  155,  155,  155,  155,  171,  172,  482,
      483,  171,  172,  174,  155,  171,  172,  171,  172,  484,
      489,  174,    0,  174,    0,    0,  155,  171,  172,  557,
        0,  171,  172,  174,  155,  171,  172,  171,  172,  484,
      489,  174,  175,  174,  155,  155,  155,  158,  175,  557,
      175,  176,  158,  558,  175,  158,  158,  176,  562,  176,
      158,    0,  175,  563,  592,    0,    0,  158,  175,    0,

      175,  176,  158,  558,  175,  158,  158,  176,  562,  176,
      158,  166,  166,  563,  592,  166,  166,  166,  166,  166,
      166,  166,  166,  234,  166,  166,  166,  166,  166,  166,
      236,  234,  235,  237,  238,  594,  242,  608,  236,  245,
      235,  237,  238,  234,  242,  235,  242,  245,    0,    0,
      236,  234,  235,  237,  238,  594,  242,  608,  236,  245,
      235,  237,  238,  609,  242,  235,  242,  245,  166,  166,
      166,  167,  167,    0,    0,  167,  167,  167,  167,  167,
      167,  167,  167,  609,  167,  167,  167,  167,  167,  167,
      167,  239,    0,  241,    0,    0,  240,  239,  167,  239,

        0,  241,    0,    0,  240,    0,  243,  241,    0,    0,
      167,  239,  240,  241,  243,    0,  240,  239,  167,  239,
        0,  241,    0,  243,  240,    0,  243,  241,  167,  167,
      167,  170,  240,  244,  243,    0,  170,    0,  246,  170,
      170,  244,    0,  243,  170,    0,  246,  244,  246,    0,
        0,  170,    0,  244,    0,  248,  170,    0,  246,  170,
      170,  244,  248,  248,  170,  247,  246,  244,  246,  247,
      249,  250,  251,  247,    0,  248,    0,    0,  249,  250,
      251,    0,  248,  248,  250,  247,  253,  254,  252,  247,
      249,  250,  251,  247,  253,  254,  252,  255,  249,  250,

      251,  252,  256,  257,  250,  255,  253,  254,  252,  257,
      256,  257,  258,    0,  253,  254,  252,  255,    0,  259,
      258,  252,  256,  257,    0,  255,  260,  259,  258,  257,
      256,  257,  258,  259,  260,  261,  260,  262,    0,  259,
      258,  263,    0,  261,    0,  262,  260,  259,  258,  263,
      264,  262,  261,  259,  260,  261,  260,  262,  264,  266,
      264,  263,    0,  261,    0,  262,    0,  266,  267,  263,
      264,  262,  261,  265,  266,  267,  267,  265,  264,  266,
      264,  265,  276,    0,    0,    0,    0,  266,  267,    0,
      276,  277,  278,  265,  266,  267,  267,  265,    0,  277,

      278,  265,  276,    0,  277,  279,  280,  281,  282,    0,
      276,  277,  278,  279,  280,  281,  282,    0,  279,  277,
      278,    0,    0,  283,  277,  279,  280,  281,  282,  283,
        0,  283,  284,  279,  280,  281,  282,  289,  279,  285,
      284,    0,    0,  283,    0,  289,  286,  285,  284,  283,
      288,  283,  284,  285,  286,  287,  286,  289,  288,  285,
      284,  290,    0,  287,  288,  289,  286,  285,  284,  290,
      288,  290,  287,  285,  286,  287,  286,  293,  288,    0,
      292,  290,  291,  287,  288,  293,  291,  292,  292,  290,
      291,  290,  287,  295,    0,  297,  294,  293,    0,    0,

      292,  295,  291,  297,  294,  293,  291,  292,  292,  294,
      291,  298,  296,  295,  299,  297,  294,    0,  300,  298,
      296,  295,  299,  297,  294,  296,  300,  301,  302,  294,
        0,  298,  296,  301,  299,  301,  302,    0,  300,  298,
      296,  307,  299,  303,  302,  296,  300,  301,  302,  307,
      304,  303,    0,  301,  306,  301,  302,  303,  304,  305,
      304,  307,  306,  303,  302,  308,    0,  305,  306,  307,
      304,  303,    0,  308,  306,  308,  305,  303,  304,  305,
      304,  319,  306,  310,    0,  308,  309,  305,  306,  319,
      309,  310,  311,  308,  309,  308,  305,  321,  310,  311,

      311,  319,    0,  310,    0,  321,  309,    0,  320,  319,
      309,  310,  311,    0,  309,    0,  320,  321,  310,  311,
      311,  320,  322,  323,  324,  321,  325,    0,  320,    0,
      322,  323,  324,    0,  325,  322,  320,    0,    0,  326,
      327,  320,  322,  323,  324,  326,  325,  326,  327,  328,
      322,  323,  324,  332,  325,  322,  327,  328,  330,  326,
      327,  332,  329,  328,    0,  326,  330,  326,  327,  328,
      329,  331,  329,  332,    0,  330,  327,  328,  330,  331,
        0,  332,  329,  328,    0,  331,  330,    0,  333,  334,
      329,  331,  329,  334,  335,  330,  333,  334,  333,  331,

        0,  335,  335,  337,  339,  331,    0,  338,  333,  334,
        0,  337,  339,  334,  335,  338,  333,  334,  333,    0,
      338,  335,  335,  337,  339,  340,  341,  338,  342,  343,
        0,  337,  339,  340,  341,  338,  342,  343,  340,  344,
      338,    0,    0,    0,  345,  340,  341,  344,  342,  343,
      345,    0,  345,  340,  341,  346,  342,  343,  340,  344,
      347,    0,    0,  346,  345,  349,    0,  344,  347,  348,
      345,  346,  345,  349,  347,  346,  350,  348,  351,  348,
      347,    0,  349,  346,  350,  349,  351,    0,  347,  348,
      350,  346,    0,  349,  347,  352,  350,  348,  351,  348,

        0,    0,  349,  352,  350,  352,  351,    0,  353,  354,
      350,  355,  353,    0,    0,  352,  353,  354,  355,  355,
        0,    0,  384,  352,  354,  352,  384,  385,  353,  354,
      384,  355,  353,    0,    0,  385,  353,  354,  355,  355,
      385,  386,  384,    0,  354,  386,  384,  385,  388,  386,
      384,  387,  388,  387,  389,  385,  388,    0,  390,  387,
      385,  386,  389,    0,  389,  386,  390,  392,  388,  386,
        0,  387,  388,  387,  389,  392,  388,  391,  390,  387,
        0,  393,  389,  394,  389,  391,  390,  392,  391,  393,
      395,  394,  396,    0,  398,  392,    0,  391,  395,  395,

      396,  393,  398,  394,    0,  391,    0,  398,  391,  393,
      395,  394,  396,  397,  398,    0,    0,  397,  395,  395,
      396,  397,  398,  400,  399,  400,  401,  398,  399,    0,
      403,  400,  399,  397,  401,    0,    0,  397,  403,  401,
      403,  397,    0,  400,  399,  400,  401,  404,  399,  402,
      403,  400,  399,  402,  401,  404,  406,  402,  403,  401,
      403,    0,  407,  405,  406,    0,    0,  404,    0,  402,
      407,  405,  408,  402,  405,  404,  406,  402,  409,    0,
      408,  410,  407,  405,  406,  410,  409,  409,  411,  410,
      407,  405,  408,    0,  405,  412,  411,    0,  409,  412,

      408,  410,    0,  412,  413,  410,  409,  409,  411,  410,
      414,    0,  413,    0,  414,  412,  411,  413,  414,  412,
      415,  416,  415,  412,  413,  416,    0,  418,  415,  416,
      414,    0,  413,    0,  414,  418,  417,  413,  414,    0,
      415,  416,  415,  419,  417,  416,  417,  418,  415,  416,
      420,  419,  421,  422,  419,  418,  417,  424,  420,  423,
      421,  422,    0,  419,  417,  424,  417,  423,  423,    0,
      420,  419,  421,  422,  419,    0,  426,  424,  420,  423,
      421,  422,  425,    0,  426,  424,  425,  423,  423,  426,
      425,  427,  428,    0,  428,  427,  426,    0,    0,  427,

      428,    0,  425,    0,  426,  429,  425,    0,  432,  426,
      425,  427,  428,  429,  428,  427,  432,    0,  429,  427,
      428,  431,  430,    0,  433,  429,  430,    0,  432,  431,
      430,  431,  433,  429,    0,  433,  432,  434,  429,  435,
      436,  431,  430,    0,  433,  434,  430,  435,  436,  431,
      430,  431,  433,  437,    0,  433,  439,  434,    0,  435,
      436,  437,  437,    0,  439,  434,  438,  435,  436,    0,
      438,  440,  441,  437,  438,  440,  439,    0,    0,  440,
      441,  437,  437,    0,  439,  441,  438,    0,    0,  442,
      438,  440,  441,  442,  438,  440,  443,  442,  443,  440,

      441,    0,  444,    0,  443,  441,  444,  446,    0,  442,
      444,  445,  447,  442,    0,  446,  443,  442,  443,  445,
      447,  445,  444,  447,  443,  448,  444,  446,  449,  450,
      444,  445,  447,  448,  452,  446,  449,  450,  451,  445,
      447,  445,  452,  447,    0,  448,  451,  451,  449,  450,
        0,  453,  454,  448,  452,  453,  449,  450,  451,  453,
      454,    0,  452,    0,    0,  454,  451,  451,  456,  455,
      456,  453,  454,  455,  457,  453,  456,  455,    0,  453,
      454,    0,  457,    0,  460,  454,    0,  457,  456,  455,
      456,  458,  460,  455,  457,  458,  456,  455,  459,  458,

        0,  462,  457,    0,  460,  461,  459,  457,  459,  462,
        0,  458,  460,  461,  463,  458,  461,    0,  459,  458,
        0,  462,  463,  464,  467,  461,  459,  490,  459,  462,
      465,  464,  467,  461,  463,  490,  461,  466,  465,  465,
      491,  466,  463,  464,  467,  466,  492,  490,  491,    0,
      465,  464,  467,  491,  492,  490,  493,  466,  465,  465,
      491,  466,  495,  494,  493,  466,  492,    0,  491,  495,
      495,  494,  496,  491,  492,  494,  493,  497,  498,    0,
      496,    0,  495,  494,  493,  497,  498,    0,  500,  495,
      495,  494,  496,    0,    0,  494,  500,  497,  498,  499,

      496,  501,  502,  499,  503,  497,  498,  499,  500,  501,
      502,    0,  503,    0,  501,    0,  500,    0,  507,  499,
      508,  501,  502,  499,  503,  505,  507,  499,  508,  501,
      502,  504,  503,  505,  501,  504,  506,  505,  507,  504,
      508,  509,  510,  506,  506,  505,  507,    0,  508,  509,
      510,  504,  512,  505,    0,  504,  506,  505,    0,  504,
      512,  509,  510,  506,  506,  513,  514,  511,  515,  509,
      510,  511,  512,  513,  514,  511,  515,    0,  513,    0,
      512,    0,  518,    0,    0,  513,  514,  511,  515,  516,
      518,  511,  517,  513,  514,  511,  515,  516,  513,  517,

      517,  516,  518,  519,    0,  520,    0,  522,    0,  516,
      518,  519,  517,  520,  521,  522,  523,  516,  521,  517,
      517,  516,  521,  519,  523,  520,    0,  522,    0,  523,
        0,  519,  524,  520,  521,  522,  523,  525,  521,  526,
      524,    0,  521,  526,  523,  525,  527,  526,  528,  523,
        0,    0,  524,  529,  527,  528,  528,  525,  527,  526,
      524,  529,  530,  526,  531,  525,  527,  526,  528,  532,
      530,    0,  531,  529,  527,  528,  528,  532,  527,  533,
      534,  529,  530,  533,  531,  535,  536,  533,  534,  532,
      530,    0,  531,  535,  536,    0,  537,  532,  535,  533,

      534,    0,  540,  533,  537,  535,  536,  533,  534,  538,
      540,    0,  539,  535,  536,  541,  537,  538,  535,  539,
      539,  538,  540,  541,  537,  542,    0,    0,  544,  538,
      540,    0,  539,  542,  543,  541,  544,  538,  543,  539,
      539,  538,  543,  541,  545,  542,    0,  546,  544,    0,
        0,  547,  545,  542,  543,  546,  544,  545,  543,  547,
      551,  548,  543,    0,  545,  548,  549,  546,  551,  548,
        0,  547,  545,    0,  549,  546,  550,  545,  549,  547,
      551,  548,  552,  550,  550,  548,  549,  553,  551,  548,
      552,  554,  565,  555,  549,  553,  550,  555,  549,  554,

      565,  555,  552,  550,  550,    0,  567,  553,    0,  567,
      552,  554,  565,  555,  567,  553,  566,  555,    0,  554,
      565,  555,  568,  566,  566,  569,  567,  570,    0,  567,
      568,  571,  573,  569,  567,  570,  566,    0,  571,  571,
      573,    0,  568,  566,  566,  569,  572,  570,  574,  572,
      568,  571,  573,  569,  572,  570,  574,  575,  571,  571,
      573,    0,    0,  577,  575,  575,  572,  576,  574,  572,
      576,  577,  578,  579,  572,  576,  574,  575,  582,    0,
      578,  579,    0,  577,  575,  575,  582,  576,    0,  580,
      576,  577,  578,  579,    0,  576,  580,  580,  582,  581,

      578,  579,  581,  583,    0,  584,  582,  581,    0,  580,
        0,  583,  584,  584,    0,    0,  580,  580,  585,  581,
      586,  585,  581,  583,    0,  584,  585,  581,  586,  587,
        0,  583,  584,  584,  588,    0,  589,  587,  585,    0,
      586,  585,  588,  589,  589,  591,  585,  590,  586,  587,
      590,  597,  596,  591,  588,  590,  589,  587,    0,  597,
      596,  599,  588,  589,  589,  591,  596,  590,  598,  599,
      590,  597,  596,  591,    0,  590,  598,  600,    0,  597,
      596,  599,  598,    0,  601,  600,  596,  602,  598,  599,
      603,  600,  601,    0,    0,  602,  598,  600,  603,    0,

      604,  602,  598,    0,  601,  600,    0,  602,  604,  605,
      603,  600,  601,    0,  604,  602,  606,  605,  603,  607,
      604,  602,    0,    0,  606,  610,    0,  607,  604,  605,
      606,    0,    0,  610,  604,  611,  606,  605,  610,  607,
        0,  612,    0,  611,  606,  610,    0,  607,  611,  612,
      606,  613,  614,  610,  612,  611,    0,    0,  610,  613,
      614,  612,  615,  611,  613,  614,    0,    0,  611,  612,
      615,  613,  614,  618,  612,  615,    0,    0,  619,  613,
      614,  618,  615,  620,  613,  614,  619,    0,  621,  622,
      615,  620,  623,  618,    0,  615,  621,  622,  619,    0,

      623,  618,    0,  620,    0,    0,  619,    0,  621,  622,
        0,  620,  623,    0,    0,    0,  621,  622,    0,    0,
      623,  627,    0,  627,    0,  627,  628,    0,  628,    0,
      628,  629,    0,  629,    0,  629,  630,    0,  630,  630,
      630,  631,    0,  631,  631,  631,  632,    0,  632,  632,
      632,  633,    0,    0,  633,  633,  634,    0,    0,  634,
      634,  635,  635,  635,  635,  635,  636,    0,    0,  636,
      636,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,

      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static const flex_int16_t yy_rule_linenum[59] =
    {   0,
       93,   98,  100,  102,  113,  118,  122,  124,  129,  135,
      139,  166,  173,  177,  200,  201,  202,  203,  204,  205,
      207,  208,  209,  210,  211,  213,  214,  215,  216,  217,
      218,  219,  220,  222,  223,  224,  225,  226,  227,  228,
      229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
      240,  241,  243,  245,  246,  248,  249,  251
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "cool.flex"
/*
 *  The scanner definition for COOL.
 */
/*
 *  Stuff enclosed in %{ %} in the first section is copied verbatim to the
 *  output, so headers and global definitions are placed here to be visible
 * to the code in the file.  Don't remove anything that was here initially
 */
#line 11 "cool.flex"
#include <cool-parse.h>
#include <stringtab.h>
#include <utilities.h>

/* The compiler assumes these identifiers. */
#define yylval cool_yylval
#define yylex  cool_yylex

/* Max size of string constants */
#define MAX_STR_CONST 1025
#define YY_NO_UNPUT   /* keep g++ happy */
/*
   The two statements below are here just so this program will compile.
   You may need to change or remove them on your final code.
*/
#define yywrap() 1
#define YY_SKIP_YYWRAP

extern FILE *fin; /* we read from this file */

/* define YY_INPUT so we read from the FILE fin:
 * This change makes it possible to use this scanner in
 * the Cool compiler.
 */
#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread( (char*)buf, sizeof(char), max_size, fin)) < 0) \
		YY_FATAL_ERROR( "read() in flex scanner failed");

char string_buf[MAX_STR_CONST]; /* to assemble string constants */
char *string_buf_ptr;

extern int curr_lineno;
extern int verbose_flag;

extern YYSTYPE cool_yylval;

/*
 *  Add Your own definitions here
 */

int commentLevel = 0;
std::string readString = "";
int readNullToken = 0;

#line 1484 "cool-lex.cc"

#line 1486 "cool-lex.cc"

#define INITIAL 0
#define MULTILINE_COMMENT 1
#define SINGLELINE_COMMENT 2
#define STRING 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals ( void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 91 "cool.flex"


#line 1772 "cool-lex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 625 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3072 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 59 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 59 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 60 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 93 "cool.flex"
{
   commentLevel += 1;
   BEGIN MULTILINE_COMMENT;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 98 "cool.flex"
{}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 100 "cool.flex"
{}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 102 "cool.flex"
{
   commentLevel -= 1;
   if(commentLevel == 0) BEGIN INITIAL;
}
	YY_BREAK
case YY_STATE_EOF(MULTILINE_COMMENT):
#line 107 "cool.flex"
{
   BEGIN INITIAL;
   yylval.error_msg = "EOF in comment";
   return (ERROR);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 113 "cool.flex"
{
   yylval.error_msg = "Unmatched *)";
   return (ERROR);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 118 "cool.flex"
{
   BEGIN SINGLELINE_COMMENT;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 122 "cool.flex"
{}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 124 "cool.flex"
{
   curr_lineno += 1;
   BEGIN INITIAL;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 129 "cool.flex"
{
   readString = "";
   readNullToken = 0;
   BEGIN STRING;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 135 "cool.flex"
{
   readString += yytext;
}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 139 "cool.flex"
{
   switch(yytext[1]) {
      case '\n':
         curr_lineno += 1;
         readString += '\n';
         break; 
      case 'n':
         readString += '\n';
         break; 
      case 't':
         readString += '\t';
         break; 
      case 'f':
         readString += '\f';
         break; 
      case 'b':
         readString += '\b';
         break; 
      case '\0': 
         readNullToken = 1;
         break;
      default:
         readString += yytext[1];
         break;
   }
}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 166 "cool.flex"
{
   BEGIN INITIAL;
   curr_lineno += 1;
   yylval.error_msg = "Unterminated string constant";
   return (ERROR);
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 173 "cool.flex"
{
   readNullToken = 1;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 177 "cool.flex"
{
   BEGIN INITIAL;

   if(readNullToken == 1) {
      yylval.error_msg = "String contains null character";
      return (ERROR);
   }

   if(readString.length() >= MAX_STR_CONST) {
      yylval.error_msg = "String constant too long";
      return (ERROR);
   }

   yylval.symbol = stringtable.add_string((char *) readString.c_str());
   return (STR_CONST);
}
	YY_BREAK
case YY_STATE_EOF(STRING):
#line 194 "cool.flex"
{
   BEGIN INITIAL;
   yylval.error_msg = "EOF in string constant";
   return (ERROR);
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 200 "cool.flex"
{ return ('@'); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 201 "cool.flex"
{ return ('~'); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 202 "cool.flex"
{ return ('+'); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 203 "cool.flex"
{ return ('-'); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 204 "cool.flex"
{ return ('*'); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 205 "cool.flex"
{ return ('/'); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 207 "cool.flex"
{ return ('='); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 208 "cool.flex"
{ return (ASSIGN); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 209 "cool.flex"
{ return ('<'); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 210 "cool.flex"
{ return (LE); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 211 "cool.flex"
{ return (DARROW); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 213 "cool.flex"
{ return ('('); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 214 "cool.flex"
{ return (')'); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 215 "cool.flex"
{ return ('{'); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 216 "cool.flex"
{ return ('}'); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 217 "cool.flex"
{ return ('.'); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 218 "cool.flex"
{ return (','); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 219 "cool.flex"
{ return (':'); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 220 "cool.flex"
{ return (';'); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 222 "cool.flex"
{ return (CLASS); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 223 "cool.flex"
{ return (IF); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 224 "cool.flex"
{ return (THEN); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 225 "cool.flex"
{ return (ELSE); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 226 "cool.flex"
{ return (FI); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 227 "cool.flex"
{ return (IN); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 228 "cool.flex"
{ return (INHERITS); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 229 "cool.flex"
{ return (ISVOID); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 230 "cool.flex"
{ return (LET); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 231 "cool.flex"
{ return (LOOP); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 232 "cool.flex"
{ return (POOL); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 233 "cool.flex"
{ return (WHILE); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 234 "cool.flex"
{ return (CASE); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 235 "cool.flex"
{ return (ESAC); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 236 "cool.flex"
{ return (NEW); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 237 "cool.flex"
{ return (OF); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 238 "cool.flex"
{ return (NOT); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 240 "cool.flex"
{ yylval.boolean = 1; return (BOOL_CONST); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 241 "cool.flex"
{ yylval.boolean = 0; return (BOOL_CONST); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 243 "cool.flex"
{ yylval.symbol = inttable.add_string(yytext); return (INT_CONST); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 245 "cool.flex"
{ yylval.symbol = idtable.add_string(yytext); return (TYPEID); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 246 "cool.flex"
{ yylval.symbol = idtable.add_string(yytext); return (OBJECTID); }
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 248 "cool.flex"
{ curr_lineno += 1; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 249 "cool.flex"
{  }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 251 "cool.flex"
{ yylval.error_msg = yytext; return (ERROR); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 253 "cool.flex"
ECHO;
	YY_BREAK
#line 2234 "cool-lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SINGLELINE_COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 61);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 625 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 61;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 625 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 624);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

    static void yyunput (int c, char * yy_bp )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 253 "cool.flex"


